services:
  db:
    image: postgres:17
    container_name: postgres
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data:rw
      - ./init-db:/docker-entrypoint-initdb.d/:rw
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
      - POSTGRES_SHARED_BUFFERS=4096MB
      - POSTGRES_LOGGING_COLLECTOR=on
      - POSTGRES_LOG_DIRECTORY=/var/log/postgresql
      - POSTGRES_LOG_FILENAME=postgresql.log
      - POSTGRES_LOG_STATEMENT=all
      - TZ=UTC
      - PGTZ=UTC
    ports:
      - 5432:5432
    networks:
      - appnet
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: always
    depends_on:
      - db
    environment:
      - PGADMIN_DEFAULT_EMAIL=rodrigodealmeida00@gmail.com
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
      - PGADMIN_CONFIG_LOGIN_BANNER="EPIC BALLAD"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - 8080:80
    networks:
      - appnet
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app
    restart: always
    depends_on:
      - db
    ports:
      - 8000:8000
    env_file:
      - .env
    volumes:
      - ./:/app:rw
    networks:
      - appnet

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    restart: always
    depends_on:
      - app
    ports:
      - 3000:3000
    environment:
      - REACT_APP_API_URL=http://app:8000
    networks:
      - appnet
    volumes:
      - ./frontend:/app:rw
    stdin_open: true
    tty: true

networks:
  appnet:
    driver: bridge

volumes:
  db_data:
  pgadmin_data:
